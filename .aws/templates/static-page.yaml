AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM configuration for Lambda@Edge to ease deployment and further updates
## https://github.com/ilya-v-trofimov/s3-site-auth/blob/master/serverless.yml
## https://github.com/awslabs/serverless-application-model/blob/cbd4d9ad40a71b838f1e72b3b960689f30890bf9/HOWTO.md
## https://github.com/awslabs/serverless-application-model/blob/master/examples/2016-10-31/lambda_edge/template.yaml

Parameters:
  StacksBucket:
    Type: String
    Default: codacystackss3-bucket-1l6li27pfth2k
    Description: S3 bucket from where the nested cloudformations will be fetched.
  DomainParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The suffix for the domain name.
  HostedZoneIdParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The suffix for the domain name.

Resources:
  LambdaVersion:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${StacksBucket}/stacks/custom-resources/lambda-version.yml
      TimeoutInMinutes: 60

  ACMCertificate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${StacksBucket}/stacks/custom-resources/acm-certificate-v2.yml
      TimeoutInMinutes: 60
      Parameters:
        Domain: !Sub ${DomainParameter}
        HostedZoneId: !Ref HostedZoneIdParameter

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "arn:aws:s3:::${WebsiteBucket}"

  CFDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: 'true'
          Comment: Static page
          DefaultRootObject: index.html
          Aliases:
            - !Ref DomainParameter
          PriceClass: PriceClass_100
          Origins:
          - DomainName: !Sub "${WebsiteBucket}.s3.amazonaws.com"
            Id: S3WebBucketOrigin
            S3OriginConfig:
              OriginAccessIdentity:
                !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          ViewerCertificate:
            AcmCertificateArn: !GetAtt ACMCertificate.Outputs.CertificateARN
            MinimumProtocolVersion: TLSv1
            SslSupportMethod: sni-only

          DefaultCacheBehavior:
            TargetOriginId: S3WebBucketOrigin
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: 0 # no cache
            MaxTTL: 0 # no cache
            Compress: true
            ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: 'none'
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt GoogleAuthEdgeFunctionNewVersion.FunctionArn

          CacheBehaviors:
            - TargetOriginId: S3WebBucketOrigin
              PathPattern: /static/*
              DefaultTTL: 0
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
              - GET
              - HEAD
              ForwardedValues:
                QueryString: false

  GoogleAuthEdgeFunctionNewVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: !GetAtt LambdaVersion.Outputs.Arn
      FunctionName: !Ref GoogleAuthEdgeFunction

  GoogleAuthEdgeFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: ../src/dist
        Role: !GetAtt SecureS3SiteLambdaRole.Arn
        Runtime: nodejs8.10
        Handler: main.auth
        Timeout: 5

  SecureS3SiteLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - replicator.lambda.amazonaws.com
            Effect: Allow
      Policies:
        - PolicyName: EdgePoliciesLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'lambda:GetFunction'
                  - 'lambda:EnableReplication*'
                  - 'lambda:InvokeFunction'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: '*'
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - "s3:ListBucket"
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}"
            - Effect: Allow
              Action:
              - "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl

  WebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}"

  WebsiteRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneIdParameter
      RecordSets:
      - Name: !Ref DomainParameter
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt [CFDistribution, DomainName]

Outputs:
    GoogleAuthEdgeFunction:
      Description: Lambda@Edge Sample Function ARN
      Value: !GetAtt GoogleAuthEdgeFunction.Arn
    CFDistribution:
      Description: Cloudfront Distribution Domain Name
      Value: !GetAtt CFDistribution.DomainName
    WebsiteBucketName:
      Description: The name of the S3 bucket which contains the static website content
      Value: !Ref WebsiteBucket
